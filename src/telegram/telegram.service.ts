import { Injectable, Logger } from '@nestjs/common'
import { OllamaService } from 'src/ollama/ollama.service'
import { UserService } from 'src/user/user.service'
import { Context } from 'telegraf'

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name)

  constructor(
    private readonly userService: UserService,
    private readonly ollamaService: OllamaService,
  ) {}

  async start(ctx: Context) {
    if (!ctx.from?.id) {
      return ctx.reply('–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ –º–æ–≥—É –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å!')
    }

    const user = await this.userService.createOrUpdate({
      telegramId: ctx.from.id.toString(),
      username: ctx.from.username,
    })

    return ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${user.username || user.telegramId}! –Ø –±–æ—Ç. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã.`)
  }

  async help(ctx: Context) {
    return ctx.reply(['–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', '/start ‚Äî –∑–∞–ø—É—Å–∫', '/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞'].join('\n'))
  }

  async fallback(ctx: Context, text?: string) {
    return ctx.reply(text || '–ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /activate
  async activate(ctx: Context, secretWord: string) {
    if (!ctx.from?.id) {
      return ctx.reply('–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ –º–æ–≥—É –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å!')
    }

    const correctSecretWord = process.env.SECRET_WORD

    const user = await this.userService.createOrUpdate({
      telegramId: ctx.from.id.toString(),
      username: ctx.from.username,
    })

    if (!correctSecretWord) {
      throw new Error('SECRET_WORD is not defined')
    }

    if (secretWord !== correctSecretWord) {
      return ctx.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ! –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã - <code>/activate —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ_—Å–ª–æ–≤–æ</code>', {
        parse_mode: 'HTML',
      })
    }

    await this.userService.updateUser(user.id, { isActive: true })

    if (user) {
      return ctx.reply('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!')
    } else {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.')
    }
  }

  async processMessage(ctx: Context, text: string) {
    // —É—Ç–∏–ª–∏—Ç–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    const startTyping = () => {
      const chatId = ctx.chat?.id
      if (!chatId) return () => {}
      ctx.telegram
        .sendChatAction(chatId, 'typing')
        .catch((e) => this.logger.debug(`sendChatAction (init) failed: ${String(e)}`))
      const timer = setInterval(() => {
        ctx.telegram
          .sendChatAction(chatId, 'typing')
          .catch((e) => this.logger.debug(`sendChatAction (tick) failed: ${String(e)}`))
      }, 4000)
      return () => clearInterval(timer)
    }

    try {
      if (!ctx.from?.id) {
        return ctx.reply('–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ –º–æ–≥—É –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å!')
      }

      const user = await this.userService.createOrUpdate({
        telegramId: ctx.from.id.toString(),
        username: ctx.from.username,
      })

      if (!user.isActive) {
        return ctx.reply('–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.')
      }

      const model = process.env.OLLAMA_MODEL_NAME || ''
      if (!model) {
        return ctx.reply('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω OLLAMA_MODEL_NAME.')
      }

      const userText = text

      // 1) –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ + "–ø–µ—á–∞—Ç–∞–µ—Ç..."
      const stopTyping = startTyping()
      const processingMsg = await ctx.reply('ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å‚Ä¶')

      // 2) –∑–∞–ø—Ä–æ—Å –∫ LLM
      const response = await this.ollamaService.reply(model, userText)

      // 3) –≤—ã–∫–ª—é—á–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
      stopTyping()

      // 4) –æ–±–Ω–æ–≤–ª—è–µ–º placeholder –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      try {
        await ctx.telegram.editMessageText(
          processingMsg.chat.id,
          processingMsg.message_id,
          undefined,
          response,
          // –µ—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å Markdown, —ç–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã:
          // { parse_mode: 'MarkdownV2' }
        )
      } catch (editErr) {
        this.logger.debug(`editMessageText failed, fallback to reply: ${String(editErr)}`)
        await ctx.reply(response)
        try {
          await ctx.deleteMessage(processingMsg.message_id)
        } catch (delErr) {
          this.logger.debug(`deleteMessage (placeholder) failed: ${String(delErr)}`)
        }
      }
    } catch (error) {
      this.logger.error('Error processing message', error)
      try {
        await ctx.reply('–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.')
      } catch (notifyErr) {
        this.logger.debug(`Failed to send error notification: ${String(notifyErr)}`)
      }
    }
  }
}
